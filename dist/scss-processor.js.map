{"version":3,"sources":["scss-processor.js"],"names":["ScssProcessor","pluginOptions","fileCache","filesByName","sass","require","inputFile","fileOptions","getFileOptions","hasOwnProperty","isImport","hasUnderscore","getPathInPackage","file","basename","isScssFile","call","enableSassCompilation","extension","extname","substring","indexOf","_process","err","numberOfAdditionalLines","globalVariablesTextLineCount","adjustedLineNumber","line","error","importPath","column","isPreprocessed","sourceFile","_wrapFileForNodeSass","_transpile","css","sourceMap","contents","path","rawContents","potentialPaths","potentialFileExtensions","extensions","forEach","push","concat","dirname","potentialPath","i","length","has","existsSync","lstatSync","isFile","Error","JSON","stringify","sassOptions","sourceMapContents","sourceMapEmbed","sourceComments","sourceMapRoot","indentedSyntax","getExtension","outFile","getBasename","importer","_importFile","bind","includePaths","data","trim","output","renderSync","toString","parse","map","rootFile","sourceFilePath","relativeTo","getImportPathRelativeToFile","_discoverImportPath","get","referencedImportPaths","_createIncludedFile","_wrapFileForNodeSassImport","prepInputFile","await","set"],"mappings":"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","file":"scss-processor.js","sourcesContent":["import path from 'path';\r\nimport fs from 'fs';\r\nimport IncludedFile from 'meteor-included-file';\r\nimport PathHelpers from 'meteor-path-helpers';\r\nimport logger from 'logger';\r\n\r\nexport default class ScssProcessor {\r\n  constructor(pluginOptions) {\r\n    this.fileCache = {};\r\n    this.filesByName = null;\r\n    this.pluginOptions = pluginOptions;\r\n    this.sass = require('node-sass');\r\n  }\r\n\r\n  isRoot(inputFile) {\r\n    const fileOptions = inputFile.getFileOptions();\r\n    if (fileOptions.hasOwnProperty('isImport')) {\r\n      return !fileOptions.isImport;\r\n    }\r\n\r\n    return !hasUnderscore(inputFile.getPathInPackage());\r\n\r\n    function hasUnderscore(file) {\r\n      return path.basename(file)[0] === '_';\r\n    }\r\n  }\r\n\r\n  shouldProcess(file) {\r\n    return isScssFile.call(this, file);\r\n\r\n    function isScssFile(file) {\r\n      if (!this.pluginOptions.enableSassCompilation || typeof this.pluginOptions.enableSassCompilation === 'boolean') {\r\n        return this.pluginOptions.enableSassCompilation;\r\n      }\r\n\r\n      const extension = path.extname(file.getPathInPackage()).substring(1);\r\n      return this.pluginOptions.enableSassCompilation.indexOf(extension) !== -1;\r\n    }\r\n  }\r\n\r\n  process(file, filesByName) {\r\n    this.filesByName = filesByName;\r\n    try {\r\n      this._process(file);\r\n    } catch (err) {\r\n      const numberOfAdditionalLines = this.pluginOptions.globalVariablesTextLineCount\r\n        ? this.pluginOptions.globalVariablesTextLineCount + 1\r\n        : 0;\r\n      const adjustedLineNumber = err.line - numberOfAdditionalLines;\r\n      logger.error(`\\n/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\r\n      logger.error(`Processing Step: SCSS compilation`);\r\n      logger.error(`Unable to compile ${file.importPath}\\nLine: ${adjustedLineNumber}, Column: ${err.column}\\n${err}`);\r\n      logger.error(`\\n/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  _process(file) {\r\n    if (file.isPreprocessed) return;\r\n\r\n    const sourceFile = this._wrapFileForNodeSass(file);\r\n    const { css, sourceMap } = this._transpile(sourceFile);\r\n    file.contents = css;\r\n    file.sourceMap = sourceMap;\r\n    file.isPreprocessed = true;\r\n  }\r\n\r\n  _wrapFileForNodeSass(file) {\r\n    return { path: file.importPath, contents: file.rawContents, file: file };\r\n  }\r\n\r\n  _discoverImportPath(importPath) {\r\n    const potentialPaths = [importPath];\r\n    const potentialFileExtensions = this.pluginOptions.enableSassCompilation === true ? this.pluginOptions.extensions : this.pluginOptions.enableSassCompilation;\r\n\r\n    if (!path.extname(importPath)) {\r\n      potentialFileExtensions.forEach(extension => potentialPaths.push(`${importPath}.${extension}`));\r\n    }\r\n    if (path.basename(importPath)[0] !== '_') {\r\n      [].concat(potentialPaths).forEach(potentialPath => potentialPaths.push(`${path.dirname(potentialPath)}/_${path.basename(potentialPath)}`));\r\n    }\r\n\r\n    for (let i = 0, potentialPath = potentialPaths[i]; i < potentialPaths.length; i++, potentialPath = potentialPaths[i]) {\r\n      if (this.filesByName.has(potentialPath) || (fs.existsSync(potentialPaths[i]) && fs.lstatSync(potentialPaths[i]).isFile())) {\r\n        return potentialPath;\r\n      }\r\n    }\r\n\r\n    throw new Error(`File '${importPath}' not found at any of the following paths: ${JSON.stringify(potentialPaths)}`);\r\n  }\r\n\r\n  _transpile(sourceFile) {\r\n    const sassOptions = {\r\n      sourceMap: true,\r\n      sourceMapContents: true,\r\n      sourceMapEmbed: false,\r\n      sourceComments: false,\r\n      sourceMapRoot: '.',\r\n      indentedSyntax: sourceFile.file.getExtension() === 'sass',\r\n      outFile: `.${sourceFile.file.getBasename()}`,\r\n      importer: this._importFile.bind(this, sourceFile),\r\n      includePaths: [],\r\n      file: sourceFile.path,\r\n      data: sourceFile.contents\r\n    };\r\n\r\n    /* Empty options.data workaround from fourseven:scss */\r\n    if (!sassOptions.data.trim()) {\r\n      sassOptions.data = '$fakevariable : blue;';\r\n    }\r\n\r\n    const output = this.sass.renderSync(sassOptions);\r\n    return { css: output.css.toString('utf-8'), sourceMap: JSON.parse(output.map.toString('utf-8')) };\r\n  }\r\n\r\n  _importFile(rootFile, sourceFilePath, relativeTo) {\r\n    let importPath = PathHelpers.getImportPathRelativeToFile(sourceFilePath, relativeTo);\r\n    importPath = this._discoverImportPath(importPath);\r\n    let inputFile = this.filesByName.get(importPath);\r\n    if (inputFile) {\r\n      rootFile.file.referencedImportPaths.push(importPath);\r\n    } else {\r\n      this._createIncludedFile(importPath, rootFile);\r\n    }\r\n\r\n    return this._wrapFileForNodeSassImport(inputFile);\r\n  }\r\n\r\n  _createIncludedFile(importPath, rootFile) {\r\n    const file = new IncludedFile(importPath, rootFile);\r\n    file.prepInputFile().await();\r\n    this.filesByName.set(importPath, file);\r\n  }\r\n\r\n  _wrapFileForNodeSassImport(file) {\r\n    return { contents: file.rawContents, file: file.importPath };\r\n  }\r\n\r\n};\r\n"]}