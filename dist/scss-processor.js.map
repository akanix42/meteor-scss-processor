{"version":3,"sources":["scss-processor.js"],"names":["ScssProcessor","compiler","globalVariables","otherOptions","_processGlobalVariables","_loadNodeSass","options","result","sass","require","globalVariablesText","globalVariablesJs","forEach","type","entry","push","convertJsonVariablesToScssVariables","fileContents","readFileSync","extname","jsonVariables","parse","convertScssVariablesToJsonVariables","mergeAll","join","globalVariablesTextLineCount","split","length","variables","convertObjectToKeyValueArray","toPairs","convertVariablesToScss","reduce","pair","processVariables","pipe","text","extractVariables","match","convertVariableToJson","replace","surroundWithBraces","str","processText","map","file","console","log","sourceFile","_wrapFileForNodeSass","_transpile","css","sourceMap","maps","contents","scss","path","importPath","potentialPaths","potentialFileExtensions","fileExtensions","extension","basename","concat","dirname","potentialPath","boundImport","_importFile","bind","sassOptions","sourceMapContents","sourceMapEmbed","sourceComments","sourceMapRoot","indentedSyntax","getExtension","outFile","getBasename","importer","args","includePaths","data","trim","_renderSass","output","toString","JSON","resolve","reject","render","err","rootFile","sourceFilePath","relativeTo","done","initialImportPath","getPathRelativeToFile","potentialImportPaths","_calculatePotentialImportPaths","importFile","importResult","_wrapFileForNodeSassImport","error","stack","inputFile"],"mappings":"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","file":"scss-processor.js","sourcesContent":["import path from 'path';\r\nimport fs from 'fs';\r\nimport PathHelpers from 'meteor-build-plugin-helper-path-helpers';\r\nimport Processor from 'meteor-compiler-processor';\r\nimport R from 'ramda';\r\nimport cjson from 'cjson';\r\nimport checkNpmPackage from 'meteor-build-plugin-helper-check-npm-package';\r\n\r\nexport default class ScssProcessor extends Processor {\r\n  constructor({ globalVariables, ...otherOptions } = {}, compiler) {\r\n    super('SCSS compilation', otherOptions, compiler);\r\n    this._processGlobalVariables(globalVariables);\r\n    this._loadNodeSass();\r\n  }\r\n\r\n  _loadNodeSass(options) {\r\n    const result = checkNpmPackage('node-sass@>=3.x', 'meteor-scss');\r\n    if (result !== true) return;\r\n\r\n    this.sass = require('node-sass');\r\n  }\r\n\r\n  _processGlobalVariables(globalVariables) {\r\n    if (!globalVariables) return;\r\n\r\n    const globalVariablesText = [];\r\n    const globalVariablesJs = [];\r\n    globalVariables.forEach(entry => {\r\n      switch (R.type(entry)) {\r\n        case 'Object':\r\n          globalVariablesJs.push(entry);\r\n          globalVariablesText.push(convertJsonVariablesToScssVariables(entry));\r\n          break;\r\n        case 'String':\r\n          const fileContents = fs.readFileSync(entry, 'utf-8');\r\n          if (path.extname(entry) === '.json') {\r\n            const jsonVariables = cjson.parse(fileContents);\r\n            globalVariablesJs.push(jsonVariables);\r\n            globalVariablesText.push(convertJsonVariablesToScssVariables(jsonVariables));\r\n          } else {\r\n            globalVariablesJs.push(convertScssVariablesToJsonVariables(fileContents));\r\n            globalVariablesText.push(fileContents);\r\n          }\r\n          break;\r\n      }\r\n    });\r\n\r\n    this.globalVariablesJs = R.mergeAll(globalVariablesJs);\r\n    this.globalVariablesText = R.join('\\n', globalVariablesText);\r\n    this.globalVariablesTextLineCount = this.globalVariablesText.split(/\\r\\n|\\r|\\n/).length;\r\n\r\n    function convertJsonVariablesToScssVariables(variables) {\r\n      const convertObjectToKeyValueArray = R.toPairs;\r\n      const convertVariablesToScss = R.reduce((variables, pair) => variables + `$${pair[0]}: ${pair[1]};\\n`, '');\r\n      const processVariables = R.pipe(convertObjectToKeyValueArray, convertVariablesToScss);\r\n      return processVariables(variables);\r\n    }\r\n\r\n    function convertScssVariablesToJsonVariables(text) {\r\n      const extractVariables = R.match(/^\\$.*/gm);\r\n      const convertVariableToJson = R.pipe(R.replace(/\"/g, '\\\\\"'), R.replace(/\\$(.*):\\s*(.*);/g, '\"$1\":\"$2\"'));\r\n      const surroundWithBraces = (str) => `{${str}}`;\r\n\r\n      const processText = R.pipe(extractVariables, R.map(convertVariableToJson), R.join(',\\n'), surroundWithBraces, cjson.parse);\r\n      return processText(text);\r\n    }\r\n  }\r\n\r\n  async _process(file, result) {\r\n    console.log('initial result', JSON.stringify(result))\r\n    const sourceFile = this._wrapFileForNodeSass(file, result);\r\n    const { css, sourceMap } = await this._transpile(sourceFile);\r\n    result.css = css;\r\n    result.maps.css = sourceMap;\r\n    console.log('scss processing result', JSON.stringify(result))\r\n\r\n    return result;\r\n  }\r\n\r\n  _wrapFileForNodeSass(file, result) {\r\n    let contents = result.scss || result.css || file.contents;\r\n    if (this.globalVariablesText) {\r\n      contents = `${this.globalVariablesText}\\n\\n${contents}`\r\n    }\r\n    result.scss = contents;\r\n    return { path: file.importPath, contents, file };\r\n  }\r\n\r\n  _calculatePotentialImportPaths(importPath) {\r\n    const potentialPaths = [importPath];\r\n    const potentialFileExtensions = this.fileExtensions;\r\n\r\n    if (!path.extname(importPath)) {\r\n      potentialFileExtensions.forEach(extension => potentialPaths.push(`${importPath}.${extension}`));\r\n    }\r\n    if (path.basename(importPath)[0] !== '_') {\r\n      [].concat(potentialPaths).forEach(potentialPath => potentialPaths.push(`${path.dirname(potentialPath)}/_${path.basename(potentialPath)}`));\r\n    }\r\n\r\n    return potentialPaths;\r\n  }\r\n\r\n  async _transpile(sourceFile) {\r\n    const boundImport = this._importFile.bind(this, sourceFile);\r\n    const sassOptions = {\r\n      sourceMap: true,\r\n      sourceMapContents: true,\r\n      sourceMapEmbed: false,\r\n      sourceComments: false,\r\n      sourceMapRoot: '.',\r\n      indentedSyntax: sourceFile.file.getExtension() === 'sass',\r\n      outFile: `.${sourceFile.file.getBasename()}`,\r\n      importer: (...args) => {this._importFile(sourceFile, ...args)},\r\n      // function(url, prev, done) {\r\n      //   boundImport(url, prev, done);\r\n      // },\r\n      includePaths: [],\r\n      file: sourceFile.path,\r\n      data: sourceFile.contents\r\n    };\r\n\r\n    /* Empty options.data workaround from fourseven:scss */\r\n    if (!sassOptions.data.trim()) {\r\n      sassOptions.data = '$fakevariable : blue;';\r\n    }\r\n\r\n    const output = await this._renderSass(sassOptions);\r\n    return { css: output.css.toString('utf-8'), sourceMap: JSON.parse(output.map.toString('utf-8')) };\r\n  }\r\n\r\n  _renderSass(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.sass.render(options, function(err, result) {\r\n        if (err)\r\n          reject(err);\r\n        else\r\n          resolve(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  async _importFile(rootFile, sourceFilePath, relativeTo, done) {\r\n    try {\r\n      let initialImportPath = PathHelpers.getPathRelativeToFile(sourceFilePath, relativeTo);\r\n      let potentialImportPaths = this._calculatePotentialImportPaths(initialImportPath);\r\n      let importResult = await this.compiler.importFile(potentialImportPaths, rootFile);\r\n      done(this._wrapFileForNodeSassImport(importResult));\r\n    } catch (err) {\r\n      console.error(err)\r\n      console.error(err.stack)\r\n      done(err);\r\n    }\r\n  }\r\n\r\n  _wrapFileForNodeSassImport(importResult) {\r\n    return { contents: importResult.scss || importResult.css, file: importResult.inputFile.importPath };\r\n  }\r\n\r\n};\r\n"]}